// Trabalho de dependabilidade de software
// 
// Objetivo: trabalho visa modelar um sistema de integração contínua.
dtmc

const double git_chance_turn_off_server = 1/27;
const double continuous_chance_turn_off_server = 1/19;
const double chance_already_update_code = 3/5; //Arrumar e tirar a chance do codigo estar desatualizado


module hasInternet
		
	// A maquina possui conexão com a internet
	hasInternetAccess : [0..1] init 0; 
	
	// internet desligada
	[] hasInternetAccess = 0 -> 0.01:(hasInternetAccess'=0) + 0.99:(hasInternetAccess'=1);		 
	// internet ligada
	[connected] hasInternetAccess = 1 -> 0.99:(hasInternetAccess'=1) + 0.01:(hasInternetAccess'=0) ; 	 
	
endmodule

module developerComputerHasInternet = hasInternet [hasInternetAccess = computerHasInternetAccess] endmodule

module gitServerOnAir
	
	// Servidor do git está no ar e tem internet
	gitServerStatus: [0..2] init 0;
		
	// servidor desligado
	[connected] gitServerStatus = 0 -> 1:(gitServerStatus'=1); 		
	// liga e verifica a internet 			 						 
	[] gitServerStatus = 1 -> 1:(gitServerStatus'= hasInternetAccess != 0 ? 2 : 1);			
	// ligado com internet e chance de desligar					 
	[] gitServerStatus = 2 -> git_chance_turn_off_server:(gitServerStatus'=0) + (1 - git_chance_turn_off_server):(gitServerStatus'=0); 	 

endmodule
	
module continousServerOnAir = gitServerOnAir [gitServerStatus = continuousServerStatus, git_chance_turn_off_server = continuous_chance_turn_off_server,gitOnAir = continousOnAir] endmodule

module updateCodeAndCommit

	// Atualizar o código e commitar 
	updateCodeAndCommit: [0..3] init 0;
		
	// Se tiver que atualizar , verifica se o computador esta com o internet e se o servidor git está no ar(que tb checa se ele esta com internet)
	[] updateCodeAndCommit = 0 -> 
		1:(updateCodeAndCommit'= (computerHasInternetAccess = 1 & gitServerStatus = 2) ? 1 : 0);
	// Codigo atualizado (git pull)	, pronto para commit
	[] updateCodeAndCommit = 1 -> 
		1:(updateCodeAndCommit'= 2);
	// Commitar as alteracoes no codigo. Se der no commit, tentar commitar novamente
	[] updateCodeAndCommit = 2 -> 
		1:(updateCodeAndCommit'= (computerHasInternetAccess = 1 & gitServerStatus = 2) ? 3 : 2);
	// Codigo comitado com sucesso
	[] updateCodeAndCommit = 3 ->
		1:(updateCodeAndCommit'=3);

endmodule

module buildDeploy
	
	// ocupado
	// pronto pra buildar
	// buildando
	// buildado 
	buildStatusServer: [0..] init 0;
	
	// jah estah buildando algum sistema (OCUPADO)
	[] buildStatusServer = 0 -> 0.985:(buildStatusServer'=1) + 0.015(buildStatusServer'=0);
	// pronto pra build 
	[] buildStatusServer = 1 -> 1:(buildStatusServer'=2);
	// Chance de erro de buildar(erro sintático) e sucesso
	[] buildStatusServer = 2 -> 0.925:(buildStatusServer'=2) + 0.075:(buildStatusServer'=3)
	//buildado com sucesso
	[] buildStatusServer = 3 -> 1:(buildStatusServer'= 4)
	// 95 de chance de deployar com sucesso + 4.995 de chance de ter erro sintatico do codigo + 0.005 de chance de faltar espaco pra storage do compilado
	[] buildStatusServer = 4 -> 0.045:(buildStatusServer'=4) + 0.005:(buildStatusServer'=4) + 0.95(buildStatusServer'=5);


	
endmodule 
 



		
		

	
	